//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/InputActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace AtomicKitchenChaos.InputActions
{
    public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""367bf7b4-3cce-4dd0-b7fe-0d8b52cf254b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a3be0c71-1477-4c3d-8c76-2f3f19f02352"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""51578744-d423-47c4-882a-5f9c4b606137"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Settings"",
                    ""type"": ""Button"",
                    ""id"": ""241b27a9-197e-4f35-9814-f28ad911e401"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d3f4c30d-40dd-4b9a-abb4-dab5baabff3b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3313a769-67c7-43ef-bfbb-91b2732702d8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4f4157c3-d256-4e49-a99b-d38f91a6fe77"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4f114f17-b70a-4fc7-96d9-8a475bdd4b8d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""59788bfd-7a81-4c59-9b7c-74cb71dea93e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d4aa4bc7-f55f-4caf-a3f7-2a58f1717de6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45ce916c-d255-4021-9b89-330169652edb"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Builder"",
            ""id"": ""302366d7-44d4-4a4a-a463-1843205c87c7"",
            ""actions"": [
                {
                    ""name"": ""PlaceObject"",
                    ""type"": ""Button"",
                    ""id"": ""2665943a-70b9-4b76-9ae4-894003a85819"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateObjectLeft"",
                    ""type"": ""Button"",
                    ""id"": ""fff1d60a-5409-47c2-95db-df543cbad271"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateObjectRight"",
                    ""type"": ""Button"",
                    ""id"": ""61cd2bf4-32b0-4f94-b33c-4c6782278deb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""e8e29b92-45bb-4568-9160-7bc8fe78d92c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Value"",
                    ""id"": ""3efd2458-a00e-4864-ada6-1a5812f5d35e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""803ff4fa-1a09-4208-bcd1-47e81d21d509"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Value"",
                    ""id"": ""bb923fcb-2c1d-4478-9305-68c52448ad71"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CancelAction"",
                    ""type"": ""Button"",
                    ""id"": ""52d9b8a1-6694-4c19-a543-2c151375c685"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc93ef73-bb3e-4321-b8b1-07c0e6fca76d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59bfad4b-50aa-4db5-b7a3-29b958cb0049"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateObjectLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcc4fb61-f496-4054-ada0-696f98705d58"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateObjectRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ff9178a-7177-4367-92af-9e3beae90389"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5fc2858f-352f-431b-8a96-56445353dd95"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""219dfa25-8f86-452b-8f9d-d4f86631fa82"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""093c6e1e-8f77-4f0c-be4b-b1919dc00d78"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5422efb5-6fce-4bc8-bbce-fec288785057"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ae3c7d6a-1008-4e45-80b0-eea435e095fa"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""88450833-77a8-440e-a1ba-33fdba937e20"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d54a7253-f255-4ed4-8847-22058ffbdf70"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cfb7ebfb-4c41-46f9-9f63-2f355d3f7ed5"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6d59360d-285c-4412-bbb8-dd0a437973ea"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0e3f4f1d-b749-4bb5-ac03-c9b3d286d968"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c615e9b5-70c3-4a56-86fa-e96c86380f2d"",
                    ""path"": ""<Mouse>/{Forward}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3ac40c44-106a-4cdd-ab84-36d0003c8cfd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
            m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
            m_Player_Settings = m_Player.FindAction("Settings", throwIfNotFound: true);
            // Builder
            m_Builder = asset.FindActionMap("Builder", throwIfNotFound: true);
            m_Builder_PlaceObject = m_Builder.FindAction("PlaceObject", throwIfNotFound: true);
            m_Builder_RotateObjectLeft = m_Builder.FindAction("RotateObjectLeft", throwIfNotFound: true);
            m_Builder_RotateObjectRight = m_Builder.FindAction("RotateObjectRight", throwIfNotFound: true);
            m_Builder_MousePosition = m_Builder.FindAction("MousePosition", throwIfNotFound: true);
            m_Builder_MoveCamera = m_Builder.FindAction("MoveCamera", throwIfNotFound: true);
            m_Builder_ZoomCamera = m_Builder.FindAction("ZoomCamera", throwIfNotFound: true);
            m_Builder_RotateCamera = m_Builder.FindAction("RotateCamera", throwIfNotFound: true);
            m_Builder_CancelAction = m_Builder.FindAction("CancelAction", throwIfNotFound: true);
        }

        ~@PlayerInputActions()
        {
            UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInputActions.Player.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Builder.enabled, "This will cause a leak and performance issues, PlayerInputActions.Builder.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Move;
        private readonly InputAction m_Player_Interact;
        private readonly InputAction m_Player_Settings;
        public struct PlayerActions
        {
            private @PlayerInputActions m_Wrapper;
            public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player_Move;
            public InputAction @Interact => m_Wrapper.m_Player_Interact;
            public InputAction @Settings => m_Wrapper.m_Player_Settings;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Settings.started += instance.OnSettings;
                @Settings.performed += instance.OnSettings;
                @Settings.canceled += instance.OnSettings;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Settings.started -= instance.OnSettings;
                @Settings.performed -= instance.OnSettings;
                @Settings.canceled -= instance.OnSettings;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Builder
        private readonly InputActionMap m_Builder;
        private List<IBuilderActions> m_BuilderActionsCallbackInterfaces = new List<IBuilderActions>();
        private readonly InputAction m_Builder_PlaceObject;
        private readonly InputAction m_Builder_RotateObjectLeft;
        private readonly InputAction m_Builder_RotateObjectRight;
        private readonly InputAction m_Builder_MousePosition;
        private readonly InputAction m_Builder_MoveCamera;
        private readonly InputAction m_Builder_ZoomCamera;
        private readonly InputAction m_Builder_RotateCamera;
        private readonly InputAction m_Builder_CancelAction;
        public struct BuilderActions
        {
            private @PlayerInputActions m_Wrapper;
            public BuilderActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @PlaceObject => m_Wrapper.m_Builder_PlaceObject;
            public InputAction @RotateObjectLeft => m_Wrapper.m_Builder_RotateObjectLeft;
            public InputAction @RotateObjectRight => m_Wrapper.m_Builder_RotateObjectRight;
            public InputAction @MousePosition => m_Wrapper.m_Builder_MousePosition;
            public InputAction @MoveCamera => m_Wrapper.m_Builder_MoveCamera;
            public InputAction @ZoomCamera => m_Wrapper.m_Builder_ZoomCamera;
            public InputAction @RotateCamera => m_Wrapper.m_Builder_RotateCamera;
            public InputAction @CancelAction => m_Wrapper.m_Builder_CancelAction;
            public InputActionMap Get() { return m_Wrapper.m_Builder; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BuilderActions set) { return set.Get(); }
            public void AddCallbacks(IBuilderActions instance)
            {
                if (instance == null || m_Wrapper.m_BuilderActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BuilderActionsCallbackInterfaces.Add(instance);
                @PlaceObject.started += instance.OnPlaceObject;
                @PlaceObject.performed += instance.OnPlaceObject;
                @PlaceObject.canceled += instance.OnPlaceObject;
                @RotateObjectLeft.started += instance.OnRotateObjectLeft;
                @RotateObjectLeft.performed += instance.OnRotateObjectLeft;
                @RotateObjectLeft.canceled += instance.OnRotateObjectLeft;
                @RotateObjectRight.started += instance.OnRotateObjectRight;
                @RotateObjectRight.performed += instance.OnRotateObjectRight;
                @RotateObjectRight.canceled += instance.OnRotateObjectRight;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @MoveCamera.started += instance.OnMoveCamera;
                @MoveCamera.performed += instance.OnMoveCamera;
                @MoveCamera.canceled += instance.OnMoveCamera;
                @ZoomCamera.started += instance.OnZoomCamera;
                @ZoomCamera.performed += instance.OnZoomCamera;
                @ZoomCamera.canceled += instance.OnZoomCamera;
                @RotateCamera.started += instance.OnRotateCamera;
                @RotateCamera.performed += instance.OnRotateCamera;
                @RotateCamera.canceled += instance.OnRotateCamera;
                @CancelAction.started += instance.OnCancelAction;
                @CancelAction.performed += instance.OnCancelAction;
                @CancelAction.canceled += instance.OnCancelAction;
            }

            private void UnregisterCallbacks(IBuilderActions instance)
            {
                @PlaceObject.started -= instance.OnPlaceObject;
                @PlaceObject.performed -= instance.OnPlaceObject;
                @PlaceObject.canceled -= instance.OnPlaceObject;
                @RotateObjectLeft.started -= instance.OnRotateObjectLeft;
                @RotateObjectLeft.performed -= instance.OnRotateObjectLeft;
                @RotateObjectLeft.canceled -= instance.OnRotateObjectLeft;
                @RotateObjectRight.started -= instance.OnRotateObjectRight;
                @RotateObjectRight.performed -= instance.OnRotateObjectRight;
                @RotateObjectRight.canceled -= instance.OnRotateObjectRight;
                @MousePosition.started -= instance.OnMousePosition;
                @MousePosition.performed -= instance.OnMousePosition;
                @MousePosition.canceled -= instance.OnMousePosition;
                @MoveCamera.started -= instance.OnMoveCamera;
                @MoveCamera.performed -= instance.OnMoveCamera;
                @MoveCamera.canceled -= instance.OnMoveCamera;
                @ZoomCamera.started -= instance.OnZoomCamera;
                @ZoomCamera.performed -= instance.OnZoomCamera;
                @ZoomCamera.canceled -= instance.OnZoomCamera;
                @RotateCamera.started -= instance.OnRotateCamera;
                @RotateCamera.performed -= instance.OnRotateCamera;
                @RotateCamera.canceled -= instance.OnRotateCamera;
                @CancelAction.started -= instance.OnCancelAction;
                @CancelAction.performed -= instance.OnCancelAction;
                @CancelAction.canceled -= instance.OnCancelAction;
            }

            public void RemoveCallbacks(IBuilderActions instance)
            {
                if (m_Wrapper.m_BuilderActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBuilderActions instance)
            {
                foreach (var item in m_Wrapper.m_BuilderActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BuilderActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BuilderActions @Builder => new BuilderActions(this);
        public interface IPlayerActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnSettings(InputAction.CallbackContext context);
        }
        public interface IBuilderActions
        {
            void OnPlaceObject(InputAction.CallbackContext context);
            void OnRotateObjectLeft(InputAction.CallbackContext context);
            void OnRotateObjectRight(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
            void OnMoveCamera(InputAction.CallbackContext context);
            void OnZoomCamera(InputAction.CallbackContext context);
            void OnRotateCamera(InputAction.CallbackContext context);
            void OnCancelAction(InputAction.CallbackContext context);
        }
    }
}
